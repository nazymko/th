/**
 * This class is generated by jOOQ
 */
package org.nazymko.th.parser.autodao.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.nazymko.th.parser.autodao.Keys;
import org.nazymko.th.parser.autodao.Thehomeland;
import org.nazymko.th.parser.autodao.tables.records.PageRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Page extends TableImpl<PageRecord> {

	private static final long serialVersionUID = 2025557637;

	/**
	 * The reference instance of <code>thehomeland.page</code>
	 */
	public static final Page PAGE = new Page();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PageRecord> getRecordType() {
		return PageRecord.class;
	}

	/**
	 * The column <code>thehomeland.page.id</code>.
	 */
	public final TableField<PageRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>thehomeland.page.url</code>.
	 */
	public final TableField<PageRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

	/**
	 * The column <code>thehomeland.page.site_id</code>.
	 */
	public final TableField<PageRecord, Integer> SITE_ID = createField("site_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>thehomeland.page.visited_at</code>.
	 */
	public final TableField<PageRecord, Timestamp> VISITED_AT = createField("visited_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>thehomeland.page.type</code>.
	 */
	public final TableField<PageRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

	/**
	 * The column <code>thehomeland.page.version</code>.
	 */
	public final TableField<PageRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>thehomeland.page.registered_at</code>.
	 */
	public final TableField<PageRecord, Timestamp> REGISTERED_AT = createField("registered_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>thehomeland.page.sourcePage</code>.
	 */
	public final TableField<PageRecord, Integer> SOURCEPAGE = createField("sourcePage", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>thehomeland.page.task_run_id</code>.
	 */
	public final TableField<PageRecord, Integer> TASK_RUN_ID = createField("task_run_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>thehomeland.page.site_url</code>.
	 */
	public final TableField<PageRecord, String> SITE_URL = createField("site_url", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * Create a <code>thehomeland.page</code> table reference
	 */
	public Page() {
		this("page", null);
	}

	/**
	 * Create an aliased <code>thehomeland.page</code> table reference
	 */
	public Page(String alias) {
		this(alias, PAGE);
	}

	private Page(String alias, Table<PageRecord> aliased) {
		this(alias, aliased, null);
	}

	private Page(String alias, Table<PageRecord> aliased, Field<?>[] parameters) {
		super(alias, Thehomeland.THEHOMELAND, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PageRecord, Integer> getIdentity() {
		return Keys.IDENTITY_PAGE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PageRecord> getPrimaryKey() {
		return Keys.KEY_PAGE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PageRecord>> getKeys() {
		return Arrays.<UniqueKey<PageRecord>>asList(Keys.KEY_PAGE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<PageRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<PageRecord, ?>>asList(Keys.PAGE_IBFK_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Page as(String alias) {
		return new Page(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Page rename(String name) {
		return new Page(name, null);
	}
}
