/**
 * This class is generated by jOOQ
 */
package org.nazymko.th.parser.autodao;


import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.nazymko.th.parser.autodao.tables.*;
import org.nazymko.th.parser.autodao.tables.records.*;

import javax.annotation.Generated;


/**
 * A class modelling foreign key relationships between tables of the <code>thehomeland</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<TaskRunRecord, Integer> IDENTITY_TASK_RUN = Identities0.IDENTITY_TASK_RUN;
	public static final Identity<TaskScheduleRecord, Integer> IDENTITY_TASK_SCHEDULE = Identities0.IDENTITY_TASK_SCHEDULE;
	public static final Identity<ThPageRecord, Integer> IDENTITY_TH_PAGE = Identities0.IDENTITY_TH_PAGE;
	public static final Identity<ThRuleRecord, Integer> IDENTITY_TH_RULE = Identities0.IDENTITY_TH_RULE;
	public static final Identity<ThSiteRecord, Integer> IDENTITY_TH_SITE = Identities0.IDENTITY_TH_SITE;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<ConnectorSyncMainLogRecord> KEY_CONNECTOR_SYNC_MAIN_LOG_PRIMARY = UniqueKeys0.KEY_CONNECTOR_SYNC_MAIN_LOG_PRIMARY;
	public static final UniqueKey<ConnectorSyncPageLogRecord> KEY_CONNECTOR_SYNC_PAGE_LOG_PRIMARY = UniqueKeys0.KEY_CONNECTOR_SYNC_PAGE_LOG_PRIMARY;
	public static final UniqueKey<TaskRunRecord> KEY_TASK_RUN_PRIMARY = UniqueKeys0.KEY_TASK_RUN_PRIMARY;
	public static final UniqueKey<TaskScheduleRecord> KEY_TASK_SCHEDULE_PRIMARY = UniqueKeys0.KEY_TASK_SCHEDULE_PRIMARY;
	public static final UniqueKey<ThPageRecord> KEY_TH_PAGE_PRIMARY = UniqueKeys0.KEY_TH_PAGE_PRIMARY;
	public static final UniqueKey<ThRuleRecord> KEY_TH_RULE_PRIMARY = UniqueKeys0.KEY_TH_RULE_PRIMARY;
	public static final UniqueKey<ThSiteRecord> KEY_TH_SITE_PRIMARY = UniqueKeys0.KEY_TH_SITE_PRIMARY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<TaskRunRecord, TaskScheduleRecord> TASK_RUN_IBFK_1 = ForeignKeys0.TASK_RUN_IBFK_1;
	public static final ForeignKey<ThAttributeDataRecord, ThRuleRecord> TH_ATTRIBUTE_DATA_IBFK_1 = ForeignKeys0.TH_ATTRIBUTE_DATA_IBFK_1;
	public static final ForeignKey<ThPageRecord, ThSiteRecord> TH_PAGE_IBFK_1 = ForeignKeys0.TH_PAGE_IBFK_1;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<TaskRunRecord, Integer> IDENTITY_TASK_RUN = createIdentity(TaskRun.TASK_RUN, TaskRun.TASK_RUN.ID);
		public static Identity<TaskScheduleRecord, Integer> IDENTITY_TASK_SCHEDULE = createIdentity(TaskSchedule.TASK_SCHEDULE, TaskSchedule.TASK_SCHEDULE.ID);
		public static Identity<ThPageRecord, Integer> IDENTITY_TH_PAGE = createIdentity(ThPage.TH_PAGE, ThPage.TH_PAGE.ID);
		public static Identity<ThRuleRecord, Integer> IDENTITY_TH_RULE = createIdentity(ThRule.TH_RULE, ThRule.TH_RULE.ID);
		public static Identity<ThSiteRecord, Integer> IDENTITY_TH_SITE = createIdentity(ThSite.TH_SITE, ThSite.TH_SITE.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<ConnectorSyncMainLogRecord> KEY_CONNECTOR_SYNC_MAIN_LOG_PRIMARY = createUniqueKey(ConnectorSyncMainLog.CONNECTOR_SYNC_MAIN_LOG, ConnectorSyncMainLog.CONNECTOR_SYNC_MAIN_LOG.ID);
		public static final UniqueKey<ConnectorSyncPageLogRecord> KEY_CONNECTOR_SYNC_PAGE_LOG_PRIMARY = createUniqueKey(ConnectorSyncPageLog.CONNECTOR_SYNC_PAGE_LOG, ConnectorSyncPageLog.CONNECTOR_SYNC_PAGE_LOG.ID);
		public static final UniqueKey<TaskRunRecord> KEY_TASK_RUN_PRIMARY = createUniqueKey(TaskRun.TASK_RUN, TaskRun.TASK_RUN.ID);
		public static final UniqueKey<TaskScheduleRecord> KEY_TASK_SCHEDULE_PRIMARY = createUniqueKey(TaskSchedule.TASK_SCHEDULE, TaskSchedule.TASK_SCHEDULE.ID);
		public static final UniqueKey<ThPageRecord> KEY_TH_PAGE_PRIMARY = createUniqueKey(ThPage.TH_PAGE, ThPage.TH_PAGE.ID);
		public static final UniqueKey<ThRuleRecord> KEY_TH_RULE_PRIMARY = createUniqueKey(ThRule.TH_RULE, ThRule.TH_RULE.ID);
		public static final UniqueKey<ThSiteRecord> KEY_TH_SITE_PRIMARY = createUniqueKey(ThSite.TH_SITE, ThSite.TH_SITE.ID);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<TaskRunRecord, TaskScheduleRecord> TASK_RUN_IBFK_1 = createForeignKey(org.nazymko.th.parser.autodao.Keys.KEY_TASK_SCHEDULE_PRIMARY, TaskRun.TASK_RUN, TaskRun.TASK_RUN.SCHEDULE_SOURCE_ID);
		public static final ForeignKey<ThAttributeDataRecord, ThRuleRecord> TH_ATTRIBUTE_DATA_IBFK_1 = createForeignKey(org.nazymko.th.parser.autodao.Keys.KEY_TH_RULE_PRIMARY, ThAttributeData.TH_ATTRIBUTE_DATA, ThAttributeData.TH_ATTRIBUTE_DATA.RULE_ID);
		public static final ForeignKey<ThPageRecord, ThSiteRecord> TH_PAGE_IBFK_1 = createForeignKey(org.nazymko.th.parser.autodao.Keys.KEY_TH_SITE_PRIMARY, ThPage.TH_PAGE, ThPage.TH_PAGE.SITE_ID);
	}
}
